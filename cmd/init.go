package cmd

import (
	"fmt"
	"os"
	"path/filepath"
	"text/template"

	"github.com/spf13/cobra"
)

var (
	framework   string
	projectType string
	full        bool
)

var initCmd = &cobra.Command{
	Use:   "init [folder]",
	Short: "Initialize new project boilerplate",
	Args:  cobra.MaximumNArgs(1),
	RunE: func(cmd *cobra.Command, args []string) error {
		var targetDir string

		if len(args) == 0 || args[0] == "." {
			cwd, err := os.Getwd()
			if err != nil {
				return err
			}
			targetDir = cwd
		} else {
			targetDir = args[0]
			if _, err := os.Stat(targetDir); os.IsNotExist(err) {
				if err := os.MkdirAll(targetDir, 0755); err != nil {
					return err
				}
				fmt.Printf("Created folder %s\n", targetDir)
			}
		}

		projectName := filepath.Base(targetDir)
		modulePath := fmt.Sprintf("github.com/glng-swndru/%s", projectName)

		fmt.Printf("Generating project in %s\n", targetDir)
		fmt.Printf("Framework: %s, Type: %s, Full: %v\n", framework, projectType, full)

		if err := generateBoilerplate(targetDir, projectName, modulePath, framework, projectType, full); err != nil {
			return err
		}

		fmt.Println("Project generated successfully!")
		return nil
	},
}

func init() {
	initCmd.Flags().StringVarP(&framework, "framework", "f", "gin", "Framework to use (gin, echo, etc)")
	initCmd.Flags().StringVarP(&projectType, "type", "t", "microservice", "Project type (microservice, monolith, modular)")
	initCmd.Flags().BoolVarP(&full, "full", "", false, "Generate full boilerplate including configs and Dockerfile")

	rootCmd.AddCommand(initCmd)
}

var mainGoTemplate = `package main

import (
    "fmt"
    "{{.ModulePath}}/internal/app"
)

func main() {
    fmt.Println("Starting {{.ProjectName}}...")
    app.Run()
}
`

var readmeTemplate = `# {{.ProjectName}}

Generated by go-boil CLI

## Framework

{{.Framework}}

## Project Type

{{.ProjectType}}
`

var appGoTemplate = `package app

import "fmt"

func Run() {
    fmt.Println("App is running")
}
`

var ginRouterTemplate = `package app

import (
    "github.com/gin-gonic/gin"
)

func NewRouter() *gin.Engine {
    r := gin.Default()

    r.GET("/ping", func(c *gin.Context) {
        c.JSON(200, gin.H{
            "message": "pong",
        })
    })

    return r
}

func Run() {
    r := NewRouter()
    r.Run() // listen and serve on 0.0.0.0:8080
}
`

var echoRouterTemplate = `package app

import (
    "net/http"
    "github.com/labstack/echo/v4"
)

func NewRouter() *echo.Echo {
    e := echo.New()

    e.GET("/ping", func(c echo.Context) error {
        return c.JSON(http.StatusOK, map[string]string{
            "message": "pong",
        })
    })

    return e
}

func Run() {
    e := NewRouter()
    e.Logger.Fatal(e.Start(":8080"))
}
`

func generateFile(path string, content string, data interface{}) error {
	f, err := os.Create(path)
	if err != nil {
		return err
	}
	defer f.Close()

	t := template.Must(template.New("file").Parse(content))
	return t.Execute(f, data)
}

func generateBoilerplate(targetDir, projectName, modulePath, framework, projectType string, full bool) error {
	internalAppDir := filepath.Join(targetDir, "internal", "app")
	if err := os.MkdirAll(internalAppDir, 0755); err != nil {
		return err
	}

	data := struct {
		ProjectName string
		ModulePath  string
		Framework   string
		ProjectType string
	}{
		ProjectName: projectName,
		ModulePath:  modulePath,
		Framework:   framework,
		ProjectType: projectType,
	}

	// main.go
	if err := generateFile(filepath.Join(targetDir, "main.go"), mainGoTemplate, data); err != nil {
		return err
	}

	// app.go
	if err := generateFile(filepath.Join(internalAppDir, "app.go"), appGoTemplate, nil); err != nil {
		return err
	}

	// router.go sesuai framework
	var routerContent string
	switch framework {
	case "gin":
		routerContent = ginRouterTemplate
	case "echo":
		routerContent = echoRouterTemplate
	default:
		routerContent = "// No router template for this framework yet"
	}
	if err := generateFile(filepath.Join(internalAppDir, "router.go"), routerContent, nil); err != nil {
		return err
	}

	// README.md
	if err := generateFile(filepath.Join(targetDir, "README.md"), readmeTemplate, data); err != nil {
		return err
	}

	if full {
		if err := generateDockerfile(targetDir, framework); err != nil {
			return err
		}
	}

	return nil
}

func generateDockerfile(targetDir, framework string) error {
	dockerfilePath := filepath.Join(targetDir, "Dockerfile")
	content := `# Start from the official Golang base image
FROM golang:1.20-alpine

WORKDIR /app

COPY go.mod .
COPY go.sum .
RUN go mod download

COPY . .

RUN go build -o main .

EXPOSE 8080

CMD ["./main"]
`

	return os.WriteFile(dockerfilePath, []byte(content), 0644)
}
